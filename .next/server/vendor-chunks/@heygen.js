"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@heygen";
exports.ids = ["vendor-chunks/@heygen"];
exports.modules = {

/***/ "(ssr)/./node_modules/@heygen/streaming-avatar/lib/index.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@heygen/streaming-avatar/lib/index.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvatarQuality: () => (/* binding */ AvatarQuality),\n/* harmony export */   ConnectionQuality: () => (/* binding */ ConnectionQuality),\n/* harmony export */   ElevenLabsModel: () => (/* binding */ ElevenLabsModel),\n/* harmony export */   STTProvider: () => (/* binding */ STTProvider),\n/* harmony export */   StreamingEvents: () => (/* binding */ StreamingEvents),\n/* harmony export */   TaskMode: () => (/* binding */ TaskMode),\n/* harmony export */   TaskType: () => (/* binding */ TaskType),\n/* harmony export */   VoiceChatTransport: () => (/* binding */ VoiceChatTransport),\n/* harmony export */   VoiceEmotion: () => (/* binding */ VoiceEmotion),\n/* harmony export */   \"default\": () => (/* binding */ StreamingAvatar)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var protobufjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/protobufjs/index.js\");\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar options = {\n\tsyntax: \"proto3\"\n};\nvar nested = {\n\tpipecat: {\n\t\tnested: {\n\t\t\tTextFrame: {\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\ttype: \"uint64\",\n\t\t\t\t\t\tid: 1\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 2\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tAudioRawFrame: {\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\ttype: \"uint64\",\n\t\t\t\t\t\tid: 1\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 2\n\t\t\t\t\t},\n\t\t\t\t\taudio: {\n\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\tid: 3\n\t\t\t\t\t},\n\t\t\t\t\tsampleRate: {\n\t\t\t\t\t\ttype: \"uint32\",\n\t\t\t\t\t\tid: 4\n\t\t\t\t\t},\n\t\t\t\t\tnumChannels: {\n\t\t\t\t\t\ttype: \"uint32\",\n\t\t\t\t\t\tid: 5\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tTranscriptionFrame: {\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\ttype: \"uint64\",\n\t\t\t\t\t\tid: 1\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 2\n\t\t\t\t\t},\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 3\n\t\t\t\t\t},\n\t\t\t\t\tuserId: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 4\n\t\t\t\t\t},\n\t\t\t\t\ttimestamp: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 5\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tFrame: {\n\t\t\t\toneofs: {\n\t\t\t\t\tframe: {\n\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\"text\",\n\t\t\t\t\t\t\t\"audio\",\n\t\t\t\t\t\t\t\"transcription\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfields: {\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: \"TextFrame\",\n\t\t\t\t\t\tid: 1\n\t\t\t\t\t},\n\t\t\t\t\taudio: {\n\t\t\t\t\t\ttype: \"AudioRawFrame\",\n\t\t\t\t\t\tid: 2\n\t\t\t\t\t},\n\t\t\t\t\ttranscription: {\n\t\t\t\t\t\ttype: \"TranscriptionFrame\",\n\t\t\t\t\t\tid: 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nvar jsonDescriptor = {\n\toptions: options,\n\tnested: nested\n};\n\nvar ConnectionQuality;\n(function (ConnectionQuality) {\n    ConnectionQuality[\"UNKNOWN\"] = \"UNKNOWN\";\n    ConnectionQuality[\"GOOD\"] = \"GOOD\";\n    ConnectionQuality[\"BAD\"] = \"BAD\";\n})(ConnectionQuality || (ConnectionQuality = {}));\nvar AbstractConnectionQualityIndicator = /** @class */ (function () {\n    function AbstractConnectionQualityIndicator(onConnectionQualityChanged) {\n        this._connectionQuality = ConnectionQuality.UNKNOWN;\n        this.onConnectionQualityChanged = onConnectionQualityChanged;\n    }\n    Object.defineProperty(AbstractConnectionQualityIndicator.prototype, \"connectionQuality\", {\n        get: function () {\n            return this._connectionQuality;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractConnectionQualityIndicator.prototype.handleStatsChanged = function () {\n        var newConnectionQuality = this.calculateConnectionQuality();\n        if (newConnectionQuality !== this._connectionQuality) {\n            this._connectionQuality = newConnectionQuality;\n            this.onConnectionQualityChanged(newConnectionQuality);\n        }\n    };\n    AbstractConnectionQualityIndicator.prototype.start = function (params) {\n        this.stop(true);\n        this._start(params);\n    };\n    AbstractConnectionQualityIndicator.prototype.stop = function (muted) {\n        if (muted === void 0) { muted = false; }\n        this._stop();\n        this._connectionQuality = ConnectionQuality.UNKNOWN;\n        if (!muted) {\n            this.onConnectionQualityChanged(ConnectionQuality.UNKNOWN);\n        }\n    };\n    return AbstractConnectionQualityIndicator;\n}());\nfunction QualityIndicatorMixer() {\n    var configs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        configs[_i] = arguments[_i];\n    }\n    var CombinedQualityIndicator = /** @class */ (function (_super) {\n        __extends(CombinedQualityIndicator, _super);\n        function CombinedQualityIndicator(onConnectionQualityChanged) {\n            var _this = _super.call(this, onConnectionQualityChanged) || this;\n            _this.childTrackers = configs.map(function (_a) {\n                var getParams = _a.getParams, TrackerClass = _a.TrackerClass;\n                return ({\n                    tracker: new TrackerClass(function () { return _this.handleStatsChanged(); }),\n                    getParams: getParams,\n                });\n            });\n            return _this;\n        }\n        CombinedQualityIndicator.prototype.calculateConnectionQuality = function () {\n            var connectionQualities = this.childTrackers.map(function (_a) {\n                var tracker = _a.tracker;\n                return tracker.connectionQuality;\n            });\n            if (connectionQualities.some(function (quality) { return quality === ConnectionQuality.BAD; })) {\n                return ConnectionQuality.BAD;\n            }\n            if (connectionQualities.every(function (quality) { return quality === ConnectionQuality.UNKNOWN; })) {\n                return ConnectionQuality.UNKNOWN;\n            }\n            return ConnectionQuality.GOOD;\n        };\n        CombinedQualityIndicator.prototype._start = function (params) {\n            this.childTrackers.forEach(function (_a) {\n                var tracker = _a.tracker, getParams = _a.getParams;\n                return tracker.start(getParams(params));\n            });\n        };\n        CombinedQualityIndicator.prototype._stop = function () {\n            this.childTrackers.forEach(function (_a) {\n                var tracker = _a.tracker;\n                return tracker.stop(true);\n            });\n        };\n        return CombinedQualityIndicator;\n    }(AbstractConnectionQualityIndicator));\n    return CombinedQualityIndicator;\n}\n\nvar LiveKitConnectionQualityIndicator = /** @class */ (function (_super) {\n    __extends(LiveKitConnectionQualityIndicator, _super);\n    function LiveKitConnectionQualityIndicator() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.room = null;\n        _this.liveKitConnectionQuality = livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionQuality.Unknown;\n        _this.liveKitConnectionState = null;\n        _this.handleConnectionQualityChanged = function (quality) {\n            _this.liveKitConnectionQuality = quality;\n            _this.handleStatsChanged();\n        };\n        _this.handleConnectionStateChanged = function (state) {\n            _this.liveKitConnectionState = state;\n            _this.handleStatsChanged();\n        };\n        return _this;\n    }\n    LiveKitConnectionQualityIndicator.prototype._start = function (room) {\n        this.room = room;\n        this.room.localParticipant.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged, this.handleConnectionQualityChanged);\n        this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged, this.handleConnectionStateChanged);\n    };\n    LiveKitConnectionQualityIndicator.prototype._stop = function () {\n        if (this.room) {\n            this.room.localParticipant.off(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged, this.handleConnectionQualityChanged);\n            this.room.off(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged, this.handleConnectionStateChanged);\n        }\n    };\n    LiveKitConnectionQualityIndicator.prototype.calculateConnectionQuality = function () {\n        if ([livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionQuality.Lost, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionQuality.Poor].includes(this.liveKitConnectionQuality)) {\n            return ConnectionQuality.BAD;\n        }\n        if (this.liveKitConnectionState &&\n            [\n                livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionState.Disconnected,\n                livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionState.Reconnecting,\n                livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionState.SignalReconnecting,\n            ].includes(this.liveKitConnectionState)) {\n            return ConnectionQuality.BAD;\n        }\n        return ConnectionQuality.GOOD;\n    };\n    return LiveKitConnectionQualityIndicator;\n}(AbstractConnectionQualityIndicator));\n\nvar t,e,s,n;function r(){}function o(){o.init.call(this);}function i(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function a(t,e,s){if(e)t.call(s);else for(var n=t.length,r=m(t,n),o=0;o<n;++o)r[o].call(s);}function c(t,e,s,n){if(e)t.call(s,n);else for(var r=t.length,o=m(t,r),i=0;i<r;++i)o[i].call(s,n);}function d(t,e,s,n,r){if(e)t.call(s,n,r);else for(var o=t.length,i=m(t,o),a=0;a<o;++a)i[a].call(s,n,r);}function u(t,e,s,n,r,o){if(e)t.call(s,n,r,o);else for(var i=t.length,a=m(t,i),c=0;c<i;++c)a[c].call(s,n,r,o);}function h(t,e,s,n){if(e)t.apply(s,n);else for(var r=t.length,o=m(t,r),i=0;i<r;++i)o[i].apply(s,n);}function l(t,e,s,n){var o,a,c,d;if(\"function\"!=typeof s)throw new TypeError('\"listener\" argument must be a function');if((a=t._events)?(a.newListener&&(t.emit(\"newListener\",e,s.listener?s.listener:s),a=t._events),c=a[e]):(a=t._events=new r,t._eventsCount=0),c){if(\"function\"==typeof c?c=a[e]=n?[s,c]:[c,s]:n?c.unshift(s):c.push(s),!c.warned&&(o=i(t))&&o>0&&c.length>o){c.warned=!0;var u=new Error(\"Possible EventEmitter memory leak detected. \"+c.length+\" \"+e+\" listeners added. Use emitter.setMaxListeners() to increase limit\");u.name=\"MaxListenersExceededWarning\",u.emitter=t,u.type=e,u.count=c.length,d=u,\"function\"==typeof console.warn?console.warn(d):console.log(d);}}else c=a[e]=s,++t._eventsCount;return t}function p(t,e,s){var n=!1;function r(){t.removeListener(e,r),n||(n=!0,s.apply(t,arguments));}return r.listener=s,r}function f(t){var e=this._events;if(e){var s=e[t];if(\"function\"==typeof s)return 1;if(s)return s.length}return 0}function m(t,e){for(var s=new Array(e);e--;)s[e]=t[e];return s}r.prototype=Object.create(null),o.EventEmitter=o,o.usingDomains=!1,o.prototype.domain=void 0,o.prototype._events=void 0,o.prototype._maxListeners=void 0,o.defaultMaxListeners=10,o.init=function(){this.domain=null,o.usingDomains&&undefined.active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new r,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},o.prototype.setMaxListeners=function(t){if(\"number\"!=typeof t||t<0||isNaN(t))throw new TypeError('\"n\" argument must be a positive number');return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return i(this)},o.prototype.emit=function(t){var e,s,n,r,o,i,l,p=\"error\"===t;if(i=this._events)p=p&&null==i.error;else if(!p)return !1;if(l=this.domain,p){if(e=arguments[1],!l){if(e instanceof Error)throw e;var f=new Error('Uncaught, unspecified \"error\" event. ('+e+\")\");throw f.context=e,f}return e||(e=new Error('Uncaught, unspecified \"error\" event')),e.domainEmitter=this,e.domain=l,e.domainThrown=!1,l.emit(\"error\",e),!1}if(!(s=i[t]))return !1;var m=\"function\"==typeof s;switch(n=arguments.length){case 1:a(s,m,this);break;case 2:c(s,m,this,arguments[1]);break;case 3:d(s,m,this,arguments[1],arguments[2]);break;case 4:u(s,m,this,arguments[1],arguments[2],arguments[3]);break;default:for(r=new Array(n-1),o=1;o<n;o++)r[o-1]=arguments[o];h(s,m,this,r);}return !0},o.prototype.addListener=function(t,e){return l(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return l(this,t,e,!0)},o.prototype.once=function(t,e){if(\"function\"!=typeof e)throw new TypeError('\"listener\" argument must be a function');return this.on(t,p(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){if(\"function\"!=typeof e)throw new TypeError('\"listener\" argument must be a function');return this.prependListener(t,p(this,t,e)),this},o.prototype.removeListener=function(t,e){var s,n,o,i,a;if(\"function\"!=typeof e)throw new TypeError('\"listener\" argument must be a function');if(!(n=this._events))return this;if(!(s=n[t]))return this;if(s===e||s.listener&&s.listener===e)0==--this._eventsCount?this._events=new r:(delete n[t],n.removeListener&&this.emit(\"removeListener\",t,s.listener||e));else if(\"function\"!=typeof s){for(o=-1,i=s.length;i-- >0;)if(s[i]===e||s[i].listener&&s[i].listener===e){a=s[i].listener,o=i;break}if(o<0)return this;if(1===s.length){if(s[0]=void 0,0==--this._eventsCount)return this._events=new r,this;delete n[t];}else !function(t,e){for(var s=e,n=s+1,r=t.length;n<r;s+=1,n+=1)t[s]=t[n];t.pop();}(s,o);n.removeListener&&this.emit(\"removeListener\",t,a||e);}return this},o.prototype.off=function(t,e){return this.removeListener(t,e)},o.prototype.removeAllListeners=function(t){var e,s;if(!(s=this._events))return this;if(!s.removeListener)return 0===arguments.length?(this._events=new r,this._eventsCount=0):s[t]&&(0==--this._eventsCount?this._events=new r:delete s[t]),this;if(0===arguments.length){for(var n,o=Object.keys(s),i=0;i<o.length;++i)\"removeListener\"!==(n=o[i])&&this.removeAllListeners(n);return this.removeAllListeners(\"removeListener\"),this._events=new r,this._eventsCount=0,this}if(\"function\"==typeof(e=s[t]))this.removeListener(t,e);else if(e)do{this.removeListener(t,e[e.length-1]);}while(e[0]);return this},o.prototype.listeners=function(t){var e,s=this._events;return s&&(e=s[t])?\"function\"==typeof e?[e.listener||e]:function(t){for(var e=new Array(t.length),s=0;s<e.length;++s)e[s]=t[s].listener||t[s];return e}(e):[]},o.listenerCount=function(t,e){return \"function\"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};class g extends o{}!function(t){t.Issue=\"issue\",t.NetworkScoresUpdated=\"network-scores-updated\",t.StatsParsingFinished=\"stats-parsing-finished\";}(t||(t={})),function(t){t.Network=\"network\",t.CPU=\"cpu\",t.Server=\"server\",t.Stream=\"stream\";}(e||(e={})),function(t){t.OutboundNetworkQuality=\"outbound-network-quality\",t.InboundNetworkQuality=\"inbound-network-quality\",t.OutboundNetworkMediaLatency=\"outbound-network-media-latency\",t.InboundNetworkMediaLatency=\"inbound-network-media-latency\",t.NetworkMediaSyncFailure=\"network-media-sync-failure\",t.OutboundNetworkThroughput=\"outbound-network-throughput\",t.InboundNetworkThroughput=\"inbound-network-throughput\",t.EncoderCPUThrottling=\"encoder-cpu-throttling\",t.DecoderCPUThrottling=\"decoder-cpu-throttling\",t.ServerIssue=\"server-issue\",t.UnknownVideoDecoderIssue=\"unknown-video-decoder\",t.LowInboundMOS=\"low-inbound-mean-opinion-score\",t.LowOutboundMOS=\"low-outbound-mean-opinion-score\",t.FrozenVideoTrack=\"frozen-video-track\",t.MissingVideoStreamData=\"missing-video-stream-data\",t.MissingAudioStreamData=\"missing-audio-stream-data\";}(s||(s={})),function(t){t[t.BAD=2.1]=\"BAD\",t[t.POOR=2.6]=\"POOR\",t[t.FAIR=3.1]=\"FAIR\",t[t.GOOD=3.8]=\"GOOD\",t[t.EXCELLENT=4.3]=\"EXCELLENT\";}(n||(n={}));class S extends o{static STATS_REPORT_READY_EVENT=\"stats-report-ready\";static STATS_REPORTS_PARSED=\"stats-reports-parsed\";isStopped=!1;reportTimer;getStatsInterval;compositeStatsParser;constructor(t){super(),this.compositeStatsParser=t.compositeStatsParser,this.getStatsInterval=t.getStatsInterval??1e4;}get isRunning(){return !!this.reportTimer&&!this.isStopped}startReporting(){if(this.reportTimer)return;const t=()=>setTimeout((()=>{this.isStopped?this.reportTimer=void 0:this.parseReports().finally((()=>{this.reportTimer=t();}));}),this.getStatsInterval);this.isStopped=!1,this.reportTimer=t();}stopReporting(){this.isStopped=!0,this.reportTimer&&(clearTimeout(this.reportTimer),this.reportTimer=void 0);}async parseReports(){const t=Date.now(),e=await this.compositeStatsParser.parse(),s=Date.now()-t;this.emit(S.STATS_REPORTS_PARSED,{timeTaken:s,reportItems:e}),e.forEach((t=>{this.emit(S.STATS_REPORT_READY_EVENT,t);}));}}const v=(()=>{const t=new Map;return e=>{const{taskId:s,delayMs:n,maxJitterMs:r,callback:o}=e,i=Math.ceil(Math.random()*(r||0)),a=t.get(s);a&&clearTimeout(a);const c=setTimeout((()=>{o(),t.delete(s);}),n+i);t.set(s,c);}})();class k{#t={};calculate(t){const{connection:{id:e}}=t,{mos:s,stats:n}=this.calculateOutboundScore(t)||{},{mos:r,stats:o}=this.calculateInboundScore(t)||{};return this.#t[e]=t,v({taskId:e,delayMs:35e3,callback:()=>delete this.#t[e]}),{outbound:s,inbound:r,connectionId:e,statsSamples:{inboundStatsSample:o,outboundStatsSample:n}}}calculateOutboundScore(t){const e=[...t.remote?.audio.inbound||[],...t.remote?.video.inbound||[]];if(!e.length)return;const s=this.#t[t.connection.id];if(!s)return;const n=[...s.remote?.audio.inbound||[],...s.remote?.video.inbound||[]],{packetsSent:r}=t.connection,o=s.connection.packetsSent,i=e.reduce(((t,e)=>{const s=n.find((t=>t.ssrc===e.ssrc));return {sumJitter:t.sumJitter+e.jitter,packetsLost:t.packetsLost+e.packetsLost,lastPacketsLost:t.lastPacketsLost+(s?.packetsLost||0)}}),{sumJitter:0,packetsLost:0,lastPacketsLost:0}),a=1e3*t.connection.currentRoundTripTime||0,{sumJitter:c}=i,d=c/e.length,u=r-o,h=i.packetsLost-i.lastPacketsLost,l=u&&h?Math.round(100*h/(u+h)):0;return {mos:this.calculateMOS({avgJitter:d,rtt:a,packetsLoss:l}),stats:{avgJitter:d,rtt:a,packetsLoss:l}}}calculateInboundScore(t){const e=[...t.audio?.inbound,...t.video?.inbound];if(!e.length)return;const s=this.#t[t.connection.id];if(!s)return;const n=[...s.video?.inbound,...s.audio?.inbound],{packetsReceived:r}=t.connection,o=s.connection.packetsReceived,i=e.reduce(((t,e)=>{const s=n.find((t=>t.ssrc===e.ssrc));return {sumJitter:t.sumJitter+e.jitter,packetsLost:t.packetsLost+e.packetsLost,lastPacketsLost:t.lastPacketsLost+(s?.packetsLost||0)}}),{sumJitter:0,packetsLost:0,lastPacketsLost:0}),a=1e3*t.connection.currentRoundTripTime||0,{sumJitter:c}=i,d=c/e.length,u=r-o,h=i.packetsLost-i.lastPacketsLost,l=u&&h?Math.round(100*h/(u+h)):0;return {mos:this.calculateMOS({avgJitter:d,rtt:a,packetsLoss:l}),stats:{avgJitter:d,rtt:a,packetsLoss:l}}}calculateMOS({avgJitter:t,rtt:e,packetsLoss:s}){const n=e+2*t+10;let r=n<160?93.2-n/40:93.2-n/120-10;return r-=2.5*s,1+.035*r+7e-6*r*(r-60)*(100-r)}}class y{#e=new Map;#s;#n;constructor(t={}){this.#s=t.statsCleanupTtlMs??35e3,this.#n=t.maxParsedStatsStorageSize??5;}detect(t,e){const s={...t,networkScores:{...e,statsSamples:e?.statsSamples||{}}},n=this.performDetection(s);return this.setLastProcessedStats(t.connection.id,s),this.performPrevStatsCleanup({connectionId:t.connection.id}),n}performPrevStatsCleanup(t){const{connectionId:e,cleanupCallback:s}=t;this.#e.has(e)&&v({taskId:e,delayMs:this.#s,callback:()=>{this.deleteLastProcessedStats(e),\"function\"==typeof s&&s();}});}setLastProcessedStats(t,e){if(!t||e.connection.id!==t)return;const s=this.#e.get(t)??[];s.push(e),s.length>this.#n&&s.shift(),this.#e.set(t,s);}getLastProcessedStats(t){const e=this.#e.get(t);return e?.[e.length-1]}getAllLastProcessedStats(t){return this.#e.get(t)??[]}deleteLastProcessedStats(t){this.#e.delete(t);}}class w extends y{#r;constructor(t={}){super(t),this.#r=t.availableOutgoingBitrateThreshold??1e5;}performDetection(t){const n=[],{availableOutgoingBitrate:r}=t.connection;if(void 0===r)return n;const o=t.audio.outbound.reduce(((t,e)=>t+e.targetBitrate),0),i=t.video.outbound.reduce(((t,e)=>t+e.bitrate),0);if(!o&&!i)return n;const a={availableOutgoingBitrate:r,videoStreamsTotalBitrate:i,audioStreamsTotalTargetBitrate:o};return o>r||i>0&&r<this.#r?(n.push({statsSample:a,type:e.Network,reason:s.OutboundNetworkThroughput}),n):n}}class b extends y{#o;#i;#a;#c;constructor(t={}){super(),this.#o=t.highPacketLossThresholdPct??5,this.#i=t.highJitterThreshold??200,this.#a=t.highJitterBufferDelayThresholdMs??500,this.#c=t.highRttThresholdMs??250;}performDetection(t){return this.processData(t)}processData(t){const n=[],r=[...t.audio?.inbound,...t.video?.inbound];if(!r.length)return n;const o=this.getLastProcessedStats(t.connection.id);if(!o)return n;const i=[...o.video?.inbound,...o.audio?.inbound],{packetsReceived:a}=t.connection,c=o.connection.packetsReceived,d=r.reduce(((t,e)=>{const s=i.find((t=>t.ssrc===e.ssrc)),n=s?.jitterBufferDelay||0,r=s?.jitterBufferEmittedCount||0,o=e.jitterBufferDelay-n,a=e.jitterBufferEmittedCount-r,c=o&&a?1e3*o/a:0;return {sumJitter:t.sumJitter+e.jitter,sumJitterBufferDelayMs:t.sumJitterBufferDelayMs+c,packetsLost:t.packetsLost+e.packetsLost,lastPacketsLost:t.lastPacketsLost+(s?.packetsLost||0)}}),{sumJitter:0,sumJitterBufferDelayMs:0,packetsLost:0,lastPacketsLost:0}),u=1e3*t.connection.currentRoundTripTime||0,{sumJitter:h,sumJitterBufferDelayMs:l}=d,p=h/r.length,f=l/r.length,m=a-c,g=d.packetsLost-d.lastPacketsLost,S=m&&g?Math.round(100*g/(m+g)):0,v=S>this.#o,k=p>=this.#i,y=u>=this.#c,w=f>this.#a,b=y&&!k&&!v,P=v&&k,T=k&&w,L={rtt:u,packetLossPct:S,avgJitter:p,avgJitterBufferDelay:f};return (k||v)&&n.push({statsSample:L,type:e.Network,reason:s.InboundNetworkQuality,iceCandidate:t.connection.local.id}),b&&n.push({statsSample:L,type:e.Server,reason:s.ServerIssue,iceCandidate:t.connection.remote.id}),P&&n.push({statsSample:L,type:e.Network,reason:s.InboundNetworkMediaLatency,iceCandidate:t.connection.local.id}),T&&n.push({statsSample:L,type:e.Network,reason:s.NetworkMediaSyncFailure,iceCandidate:t.connection.local.id}),n}}class P extends y{#d;constructor(t={}){super(),this.#d=t.correctedSamplesThresholdPct??5;}performDetection(t){return this.processData(t)}processData(t){const n=t.audio.inbound,r=[],o=this.getLastProcessedStats(t.connection.id)?.audio.inbound;return o?(n.forEach((t=>{const n=o.find((e=>e.ssrc===t.ssrc));if(!n)return;const i=t.track.insertedSamplesForDeceleration+t.track.removedSamplesForAcceleration,a=n.track.insertedSamplesForDeceleration+n.track.removedSamplesForAcceleration;if(i===a)return;const c=t.track.totalSamplesReceived-n.track.totalSamplesReceived,d=i-a,u=Math.round(100*d/c),h={correctedSamplesPct:u};u>this.#d&&r.push({statsSample:h,type:e.Network,reason:s.NetworkMediaSyncFailure,ssrc:t.ssrc});})),r):r}}class T extends y{#o;#i;constructor(t={}){super(),this.#o=t.highPacketLossThresholdPct??5,this.#i=t.highJitterThreshold??200;}performDetection(t){return this.processData(t)}processData(t){const n=[],r=[...t.remote?.audio.inbound||[],...t.remote?.video.inbound||[]];if(!r.length)return n;const o=this.getLastProcessedStats(t.connection.id);if(!o)return n;const i=[...o.remote?.audio.inbound||[],...o.remote?.video.inbound||[]],{packetsSent:a}=t.connection,c=o.connection.packetsSent,d=r.reduce(((t,e)=>{const s=i.find((t=>t.ssrc===e.ssrc));return {sumJitter:t.sumJitter+e.jitter,packetsLost:t.packetsLost+e.packetsLost,lastPacketsLost:t.lastPacketsLost+(s?.packetsLost||0)}}),{sumJitter:0,packetsLost:0,lastPacketsLost:0}),u=1e3*t.connection.currentRoundTripTime||0,{sumJitter:h}=d,l=h/r.length,p=a-c,f=d.packetsLost-d.lastPacketsLost,m=p&&f?Math.round(100*f/(p+f)):0,g=m>this.#o,S=l>=this.#i,v=!g&&S||S||g,k={rtt:u,avgJitter:l,packetLossPct:m};return g&&S&&n.push({statsSample:k,type:e.Network,reason:s.OutboundNetworkMediaLatency,iceCandidate:t.connection.local.id}),v&&n.push({statsSample:k,type:e.Network,reason:s.OutboundNetworkQuality,iceCandidate:t.connection.local.id}),n}}class L extends y{performDetection(t){return this.processData(t)}processData(t){const n=t.video.outbound.filter((t=>\"none\"!==t.qualityLimitationReason)),r=[],o=this.getLastProcessedStats(t.connection.id)?.video.outbound;return o?(n.forEach((t=>{const n=o.find((e=>e.ssrc===t.ssrc));if(!n)return;const i={qualityLimitationReason:t.qualityLimitationReason};t.framesSent>n.framesSent||(\"cpu\"===t.qualityLimitationReason&&r.push({statsSample:i,type:e.CPU,reason:s.EncoderCPUThrottling,ssrc:t.ssrc}),\"bandwidth\"===t.qualityLimitationReason&&r.push({statsSample:i,type:e.Network,reason:s.OutboundNetworkThroughput,ssrc:t.ssrc}));})),r):r}}class D extends y{UNKNOWN_DECODER=\"unknown\";#u={};performDetection(t){return this.processData(t)}performPrevStatsCleanup(t){const{connectionId:e,cleanupCallback:s}=t;super.performPrevStatsCleanup({...t,cleanupCallback:()=>{delete this.#u[e],\"function\"==typeof s&&s();}});}processData(t){const n=[],{id:r}=t.connection,o=this.getLastProcessedStats(r)?.video.inbound;return t.video.inbound.forEach((t=>{const{decoderImplementation:i,ssrc:a}=t,c=o?.find((t=>t.ssrc===a));if(c)if(i===this.UNKNOWN_DECODER){if(!this.hadLastDecoderWithIssue(r,a)){this.setLastDecoderWithIssue(r,a,this.UNKNOWN_DECODER);const o={mimeType:t.mimeType,decoderImplementation:i};n.push({ssrc:a,statsSample:o,type:e.Stream,reason:s.UnknownVideoDecoderIssue,trackIdentifier:t.track.trackIdentifier});}}else this.setLastDecoderWithIssue(r,a,void 0);})),n}setLastDecoderWithIssue(t,e,s){const n=this.#u[t]??{};void 0===s?delete n[e]:n[e]=s,this.#u[t]=n;}hadLastDecoderWithIssue(t,e){const s=this.#u[t];return (s&&s[e])===this.UNKNOWN_DECODER}}const C=t=>t.reduce(((t,e)=>t+e),0)/t.length,R=(t,e,s=30)=>{const n=[];for(let s=1;s<e.length-1;s+=1){const r=e[s]?.video?.inbound.find((e=>e.ssrc===t));if(!r)continue;const o=e[s-1]?.video?.inbound?.find((e=>e.ssrc===t));if(!r||!o)continue;const i=r.timestamp-o.timestamp,a=r.framesDecoded-o.framesDecoded;if(a>0){const t=i/a;n.push(t);}}if(n.length<=1)return !1;return (t=>{const e=((t,e)=>e.reduce(((e,s)=>e+(s-t)**2),0)/e.length)(C(t),t);return Math.sqrt(e)})(n)>s},M=(t,e)=>{for(let s=1;s<e.length;s+=1){const n=e[s].video.inbound.find((e=>e.ssrc===t));if(!n)continue;const r=e[s-1].video.inbound.find((e=>e.ssrc===t)),o=n.frameWidth!==r?.frameWidth,i=n.frameHeight!==r?.frameHeight;if(o||i)return !0}return !1};class I extends y{#h;#l;#p;constructor(t={}){super(),this.#h=t.avgFreezeDurationThresholdMs??1e3,this.#l=t.frozenDurationThresholdPct??30,this.#p=t.minMosQuality??n.BAD;}performDetection(t){const e=t.networkScores.inbound;return void 0!==e&&e<=this.#p?[]:this.processData(t)}processData(t){const n=[],r=this.getAllLastProcessedStats(t.connection.id);if(0===r.length)return [];const o=t.video.inbound.map((e=>{const s=r[r.length-1].video.inbound.find((t=>t.ssrc===e.ssrc));if(!s)return;if(M(e.ssrc,[r[r.length-1],t]))return;if(R(e.ssrc,r))return;const n=e.freezeCount-(s.freezeCount??0),o=1e3*(e.totalFreezesDuration-(s.totalFreezesDuration??0)),i=n>0?o/n:0,a=o/(e.timestamp-s.timestamp)*100;return a>this.#l||i>this.#h?{ssrc:e.ssrc,avgFreezeDurationMs:i,frozenDurationPct:a}:void 0})).filter((t=>void 0!==t));return o.length>0&&(n.push({type:e.Stream,reason:s.FrozenVideoTrack,statsSample:{ssrcs:o.map((t=>t.ssrc))}}),this.deleteLastProcessedStats(t.connection.id)),n}}class E extends y{#f;#m;#p;constructor(t={}){super(t),this.#f=t.volatilityThreshold??8,this.#m=t.affectedStreamsPercentThreshold??30,this.#p=t.minMosQuality??n.BAD;}performDetection(t){return [...this.getAllLastProcessedStats(t.connection.id),t].find((t=>void 0!==t.networkScores.inbound&&t.networkScores.inbound<=this.#p))?[]:this.processData(t)}processData(t){const n=[],r=[...this.getAllLastProcessedStats(t.connection.id),t],o=t.video.inbound.map((t=>{if(r.length<5)return;if(M(t.ssrc,r))return;const e=[];for(let s=0;s<r.length-1;s+=1){const n=r[s].video.inbound.find((e=>e.ssrc===t.ssrc));void 0!==n?.framesPerSecond&&e.push(n.framesPerSecond);}if(e.length<5)return;if(R(t.ssrc,r))return;const s=(t=>{if(0===t.length)throw new Error(\"Cannot calculate volatility for empty array\");const e=C(t);return t.reduce(((t,s)=>t+Math.abs(s-e)),0)/t.length*100/e})(e);return s>this.#f?{ssrc:t.ssrc,allFps:e,volatility:s}:void 0})).filter((t=>Boolean(t)));if(0===o.length)return n;const i=o.length/(t.video.inbound.length/100);return i>this.#m&&(n.push({type:e.CPU,reason:s.DecoderCPUThrottling,statsSample:{affectedStreamsPercent:i,throtthedStreams:o}}),this.deleteLastProcessedStats(t.connection.id)),n}}const N=t=>\"closed\"===t.iceConnectionState||\"closed\"===t.connectionState,_=(t,e,s)=>8*((t,e,s)=>{if(!e)return 0;const n=t[s],r=e[s];if(null==n||null==r)return 0;const o=Math.floor(t.timestamp)-Math.floor(e.timestamp);return 0===o?0:(Number(n)-Number(r))/o*1e3})(t,e,s);class A{connections=[];statsParser;constructor(t){this.statsParser=t.statsParser;}listConnections(){return [...this.connections]}addPeerConnection(t){this.connections.push({id:t.id??String(Date.now()+Math.random().toString(32)),pc:t.pc});}removePeerConnection(t){const e=this.connections.findIndex((({pc:e})=>e===t.pc));e>=0&&this.removeConnectionsByIndexes([e]);}async parse(){const t=[],e=this.connections.map((async(e,s)=>{if(!N(e.pc))return this.statsParser.parse(e);t.unshift(s);}));t.length&&this.removeConnectionsByIndexes(t);return (await Promise.all(e)).filter((t=>void 0!==t))}removeConnectionsByIndexes(t){t.forEach((t=>{this.connections.splice(t,1);}));}}class O{prevStats=new Map;allowedReportTypes=new Set([\"candidate-pair\",\"inbound-rtp\",\"outbound-rtp\",\"remote-outbound-rtp\",\"remote-inbound-rtp\",\"track\",\"transport\"]);ignoreSSRCList;logger;constructor(t){this.ignoreSSRCList=t.ignoreSSRCList??[],this.logger=t.logger;}get previouslyParsedStatsConnectionsIds(){return [...this.prevStats.keys()]}async parse(t){if(!N(t.pc))return this.getConnectionStats(t);this.logger.debug(\"Skip stats parsing. Connection is closed.\",{connection:t});}async getConnectionStats(t){const{pc:e,id:s}=t;try{const n=Date.now(),r=e.getReceivers().filter((t=>t.track?.enabled)),o=e.getSenders().filter((t=>t.track?.enabled)),i=await Promise.all(r.map((t=>t.getStats()))),a=await Promise.all(o.map((t=>t.getStats())));return {id:s,stats:this.mapReportsStats([...i,...a],t),timeTaken:Date.now()-n}}catch(t){return void this.logger.error(\"Failed to get stats for PC\",{id:s,pc:e,error:t})}}mapReportsStats(t,e){const s={audio:{inbound:[],outbound:[]},video:{inbound:[],outbound:[]},connection:{},remote:{video:{inbound:[],outbound:[]},audio:{inbound:[],outbound:[]}}};t.forEach((t=>{t.forEach((e=>{this.allowedReportTypes.has(e.type)&&this.updateMappedStatsWithReportItemData(e,s,t);}));}));const{id:n}=e,r=this.prevStats.get(n);return r&&this.propagateStatsWithRateValues(s,r.stats),this.prevStats.set(n,{stats:s,ts:Date.now()}),v({taskId:n,delayMs:35e3,callback:()=>this.prevStats.delete(n)}),s}updateMappedStatsWithReportItemData(t,e,s){const n=t.type;if(\"candidate-pair\"===n&&\"succeeded\"===t.state&&t.nominated)return void(e.connection=this.prepareConnectionStats(t,s));const r=this.getMediaType(t);if(!r)return;const o=t.ssrc;if(!o||!this.ignoreSSRCList.includes(o))if(\"outbound-rtp\"!==n)if(\"inbound-rtp\"!==n)\"remote-outbound-rtp\"!==n?\"remote-inbound-rtp\"===n&&(this.mapConnectionStatsIfNecessary(e,t,s),e.remote[r].inbound.push({...t})):e.remote[r].outbound.push({...t});else {const n=s.get(t.trackId)||s.get(t.mediaSourceId)||{};this.mapConnectionStatsIfNecessary(e,t,s);const o={...t,track:{...n}};e[r].inbound.push(o);}else {const n=s.get(t.trackId)||s.get(t.mediaSourceId)||{},o={...t,track:{...n}};e[r].outbound.push(o);}}getMediaType(t){const e=t.mediaType||t.kind;if(![\"audio\",\"video\"].includes(e)){const{id:e}=t;if(!e)return;return String(e).includes(\"Video\")?\"video\":String(e).includes(\"Audio\")?\"audio\":void 0}return e}propagateStatsWithRateValues(t,e){t.audio.inbound.forEach((t=>{const s=e.audio.inbound.find((({id:e})=>e===t.id));t.bitrate=_(t,s,\"bytesReceived\"),t.packetRate=_(t,s,\"packetsReceived\");})),t.audio.outbound.forEach((t=>{const s=e.audio.outbound.find((({id:e})=>e===t.id));t.bitrate=_(t,s,\"bytesSent\"),t.packetRate=_(t,s,\"packetsSent\");})),t.video.inbound.forEach((t=>{const s=e.video.inbound.find((({id:e})=>e===t.id));t.bitrate=_(t,s,\"bytesReceived\"),t.packetRate=_(t,s,\"packetsReceived\");})),t.video.outbound.forEach((t=>{const s=e.video.outbound.find((({id:e})=>e===t.id));t.bitrate=_(t,s,\"bytesSent\"),t.packetRate=_(t,s,\"packetsSent\");}));}mapConnectionStatsIfNecessary(t,e,s){if(t.connection.id||!e.transportId)return;const n=s.get(e.transportId);if(n&&n.selectedCandidatePairId){const e=s.get(n.selectedCandidatePairId);t.connection=this.prepareConnectionStats(e,s);}}prepareConnectionStats(t,e){if(!t||!e)return {};const s={...t};if(s.remoteCandidateId){const t=e.get(s.remoteCandidateId);s.remote={...t};}if(s.localCandidateId){const t=e.get(s.localCandidateId);s.local={...t};}return s}}class J extends y{#g=new Map;#S;#v;constructor(t={}){super(),this.#S=t.timeoutMs??15e3,this.#v=t.steps??3;}performDetection(t){return this.processData(t)}processData(t){const n=[],r=[...this.getAllLastProcessedStats(t.connection.id),t];if(r.length<this.#v)return n;const o=r.slice(-this.#v),i=o.map((t=>t.video.inbound)),a=o.map((t=>t.audio.inbound));n.push(...this.detectMissingData(a,e.Stream,s.MissingAudioStreamData)),n.push(...this.detectMissingData(i,e.Stream,s.MissingVideoStreamData));return new Set(this.#g.keys()).forEach((t=>{const e=this.#g.get(t);e&&Date.now()-e>this.#S&&this.removeMarkedIssue(t);})),n}detectMissingData(t,e,s){const n=[],r=t.pop(),o=J.mapStatsByTrackId(t);return r.forEach((t=>{const r=t.track.trackIdentifier,i=o.get(r);if(!Array.isArray(i)||0===i.length)return;if(t.track.detached||t.track.ended)return;if(!J.isAllBytesReceivedDidntChange(t.bytesReceived,i))return void this.removeMarkedIssue(r);if(!this.markIssue(r))return;const a={bytesReceived:t.bytesReceived};n.push({type:e,reason:s,statsSample:a,trackIdentifier:r});})),n}static mapStatsByTrackId(t){const e=new Map;return t.forEach((t=>{t.forEach((t=>{const s=e.get(t.track.trackIdentifier)||[];s.push(t),e.set(t.track.trackIdentifier,s);}));})),e}static isAllBytesReceivedDidntChange(t,e){for(let s=0;s<e.length;s+=1){if(e[s].bytesReceived!==t)return !1}return !0}markIssue(t){const e=Date.now(),s=this.#g.get(t);return (!s||e-s>this.#S)&&(this.#g.set(t,e),!0)}removeMarkedIssue(t){this.#g.delete(t);}}class x{eventEmitter;#k=!1;detectors=[];networkScoresCalculator;statsReporter;compositeStatsParser;logger;autoAddPeerConnections;constructor(e){this.logger=e.logger??{debug:()=>{},info:()=>{},warn:()=>{},error:()=>{}},this.eventEmitter=e.issueEmitter??new g,e.onIssues&&this.eventEmitter.on(t.Issue,e.onIssues),e.onNetworkScoresUpdated&&this.eventEmitter.on(t.NetworkScoresUpdated,e.onNetworkScoresUpdated),this.detectors=e.detectors??[new L,new b,new T,new P,new w,new D,new I,new E,new J],this.networkScoresCalculator=e.networkScoresCalculator??new k,this.compositeStatsParser=e.compositeStatsParser??new A({statsParser:new O({ignoreSSRCList:e.ignoreSSRCList,logger:this.logger})}),this.statsReporter=e.statsReporter??new S({compositeStatsParser:this.compositeStatsParser,getStatsInterval:e.getStatsInterval??5e3}),window.wid=this,this.autoAddPeerConnections=e.autoAddPeerConnections??!0,this.autoAddPeerConnections&&this.wrapRTCPeerConnection(),this.statsReporter.on(S.STATS_REPORT_READY_EVENT,(t=>{const e=this.calculateNetworkScores(t.stats);this.detectIssues({data:t.stats},e);})),this.statsReporter.on(S.STATS_REPORTS_PARSED,(s=>{const n={timeTaken:s.timeTaken,ts:Date.now()};e.onStats&&e.onStats(s.reportItems),this.eventEmitter.emit(t.StatsParsingFinished,n);}));}watchNewPeerConnections(){if(!this.autoAddPeerConnections)throw new Error(\"Auto add peer connections was disabled in the constructor.\");this.#k?this.logger.warn(\"WebRTCIssueDetector is already started. Skip processing\"):(this.logger.info(\"Start watching peer connections\"),this.#k=!0,this.statsReporter.startReporting());}stopWatchingNewPeerConnections(){this.#k?(this.logger.info(\"Stop watching peer connections\"),this.#k=!1,this.statsReporter.stopReporting()):this.logger.warn(\"WebRTCIssueDetector is already stopped. Skip processing\");}handleNewPeerConnection(t,e){this.#k||!this.autoAddPeerConnections?(this.#k||!1!==this.autoAddPeerConnections||(this.logger.info(\"Starting stats reporting for new peer connection\"),this.#k=!0,this.statsReporter.startReporting()),this.logger.debug(\"Handling new peer connection\",t),this.compositeStatsParser.addPeerConnection({pc:t,id:e})):this.logger.debug(\"Skip handling new peer connection. Detector is not running\",t);}emitIssues(e){this.eventEmitter.emit(t.Issue,e);}detectIssues({data:t},e){const s=this.detectors.reduce(((s,n)=>[...s,...n.detect(t,e)]),[]);s.length>0&&this.emitIssues(s);}calculateNetworkScores(e){const s=this.networkScoresCalculator.calculate(e);return this.eventEmitter.emit(t.NetworkScoresUpdated,s),s}wrapRTCPeerConnection(){if(!window.RTCPeerConnection)return void this.logger.warn(\"No RTCPeerConnection found in browser window. Skipping\");const t=window.RTCPeerConnection,e=t=>this.handleNewPeerConnection(t);function s(s){const n=new t(s);return e(n),n}s.prototype=t.prototype,window.RTCPeerConnection=s;}}\n\nvar WebRTCConnectionQualityIndicator = /** @class */ (function (_super) {\n    __extends(WebRTCConnectionQualityIndicator, _super);\n    function WebRTCConnectionQualityIndicator() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.issueDetector = null;\n        _this.mosScores = null;\n        return _this;\n    }\n    WebRTCConnectionQualityIndicator.prototype._start = function (peerConnection) {\n        var _this = this;\n        this.issueDetector = new x({\n            autoAddPeerConnections: false,\n            getStatsInterval: 3000,\n            onNetworkScoresUpdated: function (scores) {\n                _this.mosScores = scores;\n                _this.handleStatsChanged();\n            },\n        });\n        this.issueDetector.handleNewPeerConnection(peerConnection);\n    };\n    WebRTCConnectionQualityIndicator.prototype._stop = function () {\n        if (this.issueDetector) {\n            this.issueDetector.stopWatchingNewPeerConnections();\n            this.issueDetector = null;\n        }\n        this.mosScores = null;\n    };\n    WebRTCConnectionQualityIndicator.prototype.calculateConnectionQuality = function () {\n        if (!this.mosScores || (this.mosScores.inbound && this.mosScores.outbound)) {\n            return ConnectionQuality.UNKNOWN;\n        }\n        if ((this.mosScores.inbound && this.mosScores.inbound < 3) ||\n            (this.mosScores.outbound && this.mosScores.outbound < 3)) {\n            return ConnectionQuality.BAD;\n        }\n        return ConnectionQuality.GOOD;\n    };\n    return WebRTCConnectionQualityIndicator;\n}(AbstractConnectionQualityIndicator));\n\nvar VoiceChatState;\n(function (VoiceChatState) {\n    VoiceChatState[\"INACTIVE\"] = \"inactive\";\n    VoiceChatState[\"STARTING\"] = \"starting\";\n    VoiceChatState[\"ACTIVE\"] = \"started\";\n    VoiceChatState[\"STOPPING\"] = \"stopping\";\n})(VoiceChatState || (VoiceChatState = {}));\nvar AbstractVoiceChat = /** @class */ (function () {\n    function AbstractVoiceChat() {\n    }\n    return AbstractVoiceChat;\n}());\nvar AbstractVoiceChatImplementation = /** @class */ (function (_super) {\n    __extends(AbstractVoiceChatImplementation, _super);\n    function AbstractVoiceChatImplementation() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._isMuted = true;\n        _this.state = VoiceChatState.INACTIVE;\n        return _this;\n    }\n    Object.defineProperty(AbstractVoiceChatImplementation.prototype, \"isMuted\", {\n        get: function () {\n            return this._isMuted;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbstractVoiceChatImplementation.prototype, \"isVoiceChatting\", {\n        get: function () {\n            return this.state !== VoiceChatState.INACTIVE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AbstractVoiceChatImplementation.prototype.startVoiceChat = function (voiceChatConfig) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.state !== VoiceChatState.INACTIVE)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.stopVoiceChat()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 6]);\n                        this.state = VoiceChatState.STARTING;\n                        return [4 /*yield*/, this._startVoiceChat(voiceChatConfig)];\n                    case 3:\n                        _a.sent();\n                        this.state = VoiceChatState.ACTIVE;\n                        return [3 /*break*/, 6];\n                    case 4:\n                        e_1 = _a.sent();\n                        return [4 /*yield*/, this.stopVoiceChat()];\n                    case 5:\n                        _a.sent();\n                        throw e_1;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AbstractVoiceChatImplementation.prototype.stopVoiceChat = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.state === VoiceChatState.INACTIVE) {\n                            return [2 /*return*/];\n                        }\n                        this.state = VoiceChatState.STOPPING;\n                        return [4 /*yield*/, this._stopVoiceChat()];\n                    case 1:\n                        _a.sent();\n                        this._isMuted = true;\n                        this.state = VoiceChatState.INACTIVE;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AbstractVoiceChatImplementation.prototype._mute = function () {\n        return;\n    };\n    AbstractVoiceChatImplementation.prototype._unmute = function () {\n        return;\n    };\n    AbstractVoiceChatImplementation.prototype.mute = function () {\n        if (!this.isVoiceChatting) {\n            return;\n        }\n        this._mute();\n        this._isMuted = true;\n    };\n    AbstractVoiceChatImplementation.prototype.unmute = function () {\n        if (!this.isVoiceChatting) {\n            return;\n        }\n        this._unmute();\n        this._isMuted = false;\n    };\n    return AbstractVoiceChatImplementation;\n}(AbstractVoiceChat));\n\nfunction sleep(ms) {\n    return new Promise(function (resolve) { return setTimeout(resolve, ms); });\n}\nfunction convertFloat32ToS16PCM(float32Array) {\n    var int16Array = new Int16Array(float32Array.length);\n    for (var i = 0; i < float32Array.length; i++) {\n        var clampedValue = Math.max(-1, Math.min(1, float32Array[i]));\n        int16Array[i] = clampedValue < 0 ? clampedValue * 32768 : clampedValue * 32767;\n    }\n    return int16Array;\n}\n\nvar LivekitVoiceChat = /** @class */ (function (_super) {\n    __extends(LivekitVoiceChat, _super);\n    function LivekitVoiceChat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.room = null;\n        _this.track = null;\n        return _this;\n    }\n    LivekitVoiceChat.prototype._startVoiceChat = function (voiceChatConfig) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            var _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this.room = voiceChatConfig.room;\n                        _a = this;\n                        return [4 /*yield*/, (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.createLocalAudioTrack)({\n                                echoCancellation: true,\n                                noiseSuppression: true,\n                                autoGainControl: true,\n                            })];\n                    case 1:\n                        _a.track = _c.sent();\n                        return [4 /*yield*/, this.room.localParticipant.publishTrack(this.track)];\n                    case 2:\n                        _c.sent();\n                        if (!((_b = voiceChatConfig.config) === null || _b === void 0 ? void 0 : _b.defaultMuted)) {\n                            this.unmute();\n                        }\n                        else {\n                            this.mute();\n                        }\n                        return [4 /*yield*/, sleep(4000)];\n                    case 3:\n                        _c.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LivekitVoiceChat.prototype._stopVoiceChat = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                if ((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant) {\n                    this.room.localParticipant.getTrackPublications().forEach(function (publication) {\n                        if (publication.track && publication.track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Kind.Audio) {\n                            publication.track.stop();\n                        }\n                    });\n                }\n                if (this.track) {\n                    this.track.stop();\n                    this.track = null;\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    LivekitVoiceChat.prototype._mute = function () {\n        if (this.track && !this.track.isMuted) {\n            this.track.mute();\n        }\n    };\n    LivekitVoiceChat.prototype._unmute = function () {\n        if (this.track && this.track.isMuted) {\n            this.track.unmute();\n        }\n    };\n    return LivekitVoiceChat;\n}(AbstractVoiceChatImplementation));\n\nvar WebSocketVoiceChat = /** @class */ (function (_super) {\n    __extends(WebSocketVoiceChat, _super);\n    function WebSocketVoiceChat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.audioContext = null;\n        _this.webSocket = null;\n        _this.scriptProcessor = null;\n        _this.mediaStreamAudioSource = null;\n        _this.mediaDevicesStream = null;\n        _this.audioRawFrame = null;\n        return _this;\n    }\n    WebSocketVoiceChat.prototype._startVoiceChat = function (voiceChatConfig) {\n        return __awaiter(this, void 0, void 0, function () {\n            var devicesStream;\n            var _this = this;\n            var _a, _b, _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                            throw new Error('Cannot start voice chat without media devices');\n                        }\n                        this.webSocket = voiceChatConfig.webSocket;\n                        this.audioRawFrame = voiceChatConfig.audioRawFrame;\n                        this.audioContext = new window.AudioContext({\n                            latencyHint: 'interactive',\n                            sampleRate: 16000,\n                        });\n                        if (!((_a = voiceChatConfig.config) === null || _a === void 0 ? void 0 : _a.defaultMuted)) {\n                            this.unmute();\n                        }\n                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({\n                                audio: {\n                                    sampleRate: 16000,\n                                    channelCount: 1,\n                                    autoGainControl: true,\n                                    echoCancellation: true,\n                                    noiseSuppression: true,\n                                },\n                            })];\n                    case 1:\n                        devicesStream = _e.sent();\n                        this.mediaDevicesStream = devicesStream;\n                        this.mediaStreamAudioSource =\n                            (_b = this.audioContext) === null || _b === void 0 ? void 0 : _b.createMediaStreamSource(devicesStream);\n                        this.scriptProcessor = (_c = this.audioContext) === null || _c === void 0 ? void 0 : _c.createScriptProcessor(512, 1, 1);\n                        this.mediaStreamAudioSource.connect(this.scriptProcessor);\n                        this.scriptProcessor.connect((_d = this.audioContext) === null || _d === void 0 ? void 0 : _d.destination);\n                        this.scriptProcessor.onaudioprocess = function (event) {\n                            var _a;\n                            if (!_this.webSocket || !_this.audioRawFrame) {\n                                return;\n                            }\n                            var audioData;\n                            if (_this.isMuted) {\n                                audioData = new Float32Array(512);\n                            }\n                            else {\n                                audioData = event.inputBuffer.getChannelData(0);\n                            }\n                            var pcmS16Array = convertFloat32ToS16PCM(audioData);\n                            var pcmByteArray = new Uint8Array(pcmS16Array.buffer);\n                            var frame = _this.audioRawFrame.create({\n                                audio: {\n                                    audio: Array.from(pcmByteArray),\n                                    sampleRate: 16000,\n                                    numChannels: 1,\n                                },\n                            });\n                            var encodedFrame = new Uint8Array(_this.audioRawFrame.encode(frame).finish());\n                            (_a = _this.webSocket) === null || _a === void 0 ? void 0 : _a.send(encodedFrame);\n                        };\n                        // though room has been connected, but the stream may not be ready.\n                        return [4 /*yield*/, sleep(2000)];\n                    case 2:\n                        // though room has been connected, but the stream may not be ready.\n                        _e.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WebSocketVoiceChat.prototype._stopVoiceChat = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                if (this.audioContext) {\n                    this.audioContext = null;\n                }\n                if (this.scriptProcessor) {\n                    this.scriptProcessor.disconnect();\n                    this.scriptProcessor = null;\n                }\n                if (this.mediaStreamAudioSource) {\n                    this.mediaStreamAudioSource.disconnect();\n                    this.mediaStreamAudioSource = null;\n                }\n                if (this.mediaDevicesStream) {\n                    (_b = (_a = this.mediaDevicesStream) === null || _a === void 0 ? void 0 : _a.getTracks()) === null || _b === void 0 ? void 0 : _b.forEach(function (track) { return track.stop(); });\n                    this.mediaDevicesStream = null;\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return WebSocketVoiceChat;\n}(AbstractVoiceChatImplementation));\n\nvar VoiceChatTransport;\n(function (VoiceChatTransport) {\n    VoiceChatTransport[\"LIVEKIT\"] = \"livekit\";\n    VoiceChatTransport[\"WEBSOCKET\"] = \"websocket\";\n})(VoiceChatTransport || (VoiceChatTransport = {}));\nvar VoiceChatFactory = /** @class */ (function (_super) {\n    __extends(VoiceChatFactory, _super);\n    function VoiceChatFactory(_a) {\n        var voiceChatInstance = _a.voiceChatInstance, initialConfig = _a.initialConfig;\n        var _this = _super.call(this) || this;\n        _this.initialConfig = initialConfig;\n        _this.voiceChat = voiceChatInstance;\n        return _this;\n    }\n    Object.defineProperty(VoiceChatFactory.prototype, \"isMuted\", {\n        get: function () {\n            return this.voiceChat.isMuted;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VoiceChatFactory.prototype, \"isVoiceChatting\", {\n        get: function () {\n            return this.voiceChat.isVoiceChatting;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VoiceChatFactory.prototype.startVoiceChat = function (_a) {\n        return __awaiter(this, arguments, void 0, function (_b) {\n            var config = _b.config;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.voiceChat.startVoiceChat(__assign(__assign({}, this.initialConfig), { config: config }))];\n                    case 1:\n                        _c.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    VoiceChatFactory.prototype.stopVoiceChat = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.voiceChat.stopVoiceChat()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    VoiceChatFactory.prototype.mute = function () {\n        this.voiceChat.mute();\n    };\n    VoiceChatFactory.prototype.unmute = function () {\n        this.voiceChat.unmute();\n    };\n    VoiceChatFactory.createLiveKitVoiceChat = function (voiceChatConfig) {\n        return new this({\n            voiceChatInstance: new LivekitVoiceChat(),\n            initialConfig: voiceChatConfig,\n        });\n    };\n    VoiceChatFactory.createWebSocketVoiceChat = function (voiceChatConfig) {\n        return new this({\n            voiceChatInstance: new WebSocketVoiceChat(),\n            initialConfig: voiceChatConfig,\n        });\n    };\n    return VoiceChatFactory;\n}(AbstractVoiceChat));\n\nvar AvatarQuality;\n(function (AvatarQuality) {\n    AvatarQuality[\"Low\"] = \"low\";\n    AvatarQuality[\"Medium\"] = \"medium\";\n    AvatarQuality[\"High\"] = \"high\";\n})(AvatarQuality || (AvatarQuality = {}));\nvar VoiceEmotion;\n(function (VoiceEmotion) {\n    VoiceEmotion[\"EXCITED\"] = \"excited\";\n    VoiceEmotion[\"SERIOUS\"] = \"serious\";\n    VoiceEmotion[\"FRIENDLY\"] = \"friendly\";\n    VoiceEmotion[\"SOOTHING\"] = \"soothing\";\n    VoiceEmotion[\"BROADCASTER\"] = \"broadcaster\";\n})(VoiceEmotion || (VoiceEmotion = {}));\nvar ElevenLabsModel;\n(function (ElevenLabsModel) {\n    ElevenLabsModel[\"eleven_flash_v2_5\"] = \"eleven_flash_v2_5\";\n    ElevenLabsModel[\"eleven_multilingual_v2\"] = \"eleven_multilingual_v2\";\n})(ElevenLabsModel || (ElevenLabsModel = {}));\nvar STTProvider;\n(function (STTProvider) {\n    STTProvider[\"DEEPGRAM\"] = \"deepgram\";\n    STTProvider[\"GLADIA\"] = \"gladia\";\n})(STTProvider || (STTProvider = {}));\nvar TaskType;\n(function (TaskType) {\n    TaskType[\"TALK\"] = \"talk\";\n    TaskType[\"REPEAT\"] = \"repeat\";\n})(TaskType || (TaskType = {}));\nvar TaskMode;\n(function (TaskMode) {\n    TaskMode[\"SYNC\"] = \"sync\";\n    TaskMode[\"ASYNC\"] = \"async\";\n})(TaskMode || (TaskMode = {}));\n// event types --------------------------------\nvar StreamingEvents;\n(function (StreamingEvents) {\n    StreamingEvents[\"AVATAR_START_TALKING\"] = \"avatar_start_talking\";\n    StreamingEvents[\"AVATAR_STOP_TALKING\"] = \"avatar_stop_talking\";\n    StreamingEvents[\"AVATAR_TALKING_MESSAGE\"] = \"avatar_talking_message\";\n    StreamingEvents[\"AVATAR_END_MESSAGE\"] = \"avatar_end_message\";\n    StreamingEvents[\"USER_TALKING_MESSAGE\"] = \"user_talking_message\";\n    StreamingEvents[\"USER_END_MESSAGE\"] = \"user_end_message\";\n    StreamingEvents[\"USER_START\"] = \"user_start\";\n    StreamingEvents[\"USER_STOP\"] = \"user_stop\";\n    StreamingEvents[\"USER_SILENCE\"] = \"user_silence\";\n    StreamingEvents[\"STREAM_READY\"] = \"stream_ready\";\n    StreamingEvents[\"STREAM_DISCONNECTED\"] = \"stream_disconnected\";\n    StreamingEvents[\"CONNECTION_QUALITY_CHANGED\"] = \"connection_quality_changed\";\n})(StreamingEvents || (StreamingEvents = {}));\nvar APIError = /** @class */ (function (_super) {\n    __extends(APIError, _super);\n    function APIError(message, status, responseText) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'APIError';\n        _this.status = status;\n        _this.responseText = responseText;\n        return _this;\n    }\n    return APIError;\n}(Error));\nvar ConnectionQualityIndicatorClass = QualityIndicatorMixer({\n    TrackerClass: LiveKitConnectionQualityIndicator,\n    getParams: function (room) { return room; },\n}, {\n    TrackerClass: WebRTCConnectionQualityIndicator,\n    getParams: function (room) { var _a; return ((_a = room.engine.pcManager) === null || _a === void 0 ? void 0 : _a.subscriber)._pc; },\n});\nvar StreamingAvatar = /** @class */ (function () {\n    function StreamingAvatar(_a) {\n        var token = _a.token, _b = _a.basePath, basePath = _b === void 0 ? 'https://api.heygen.com' : _b;\n        var _this = this;\n        this.room = null;\n        this.mediaStream = null;\n        this.eventTarget = new EventTarget();\n        this.webSocket = null;\n        this.sessionId = null;\n        this.voiceChat = null;\n        this.isLiveKitTransport = false;\n        this.token = token;\n        this.basePath = basePath;\n        this.connectionQualityIndicator = new ConnectionQualityIndicatorClass(function (quality) {\n            return _this.emit(StreamingEvents.CONNECTION_QUALITY_CHANGED, quality);\n        });\n    }\n    Object.defineProperty(StreamingAvatar.prototype, \"connectionQuality\", {\n        get: function () {\n            return this.connectionQualityIndicator.connectionQuality;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StreamingAvatar.prototype, \"isInputAudioMuted\", {\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this.voiceChat) === null || _a === void 0 ? void 0 : _a.isMuted) !== null && _b !== void 0 ? _b : true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StreamingAvatar.prototype.muteInputAudio = function () {\n        var _a;\n        (_a = this.voiceChat) === null || _a === void 0 ? void 0 : _a.mute();\n    };\n    StreamingAvatar.prototype.unmuteInputAudio = function () {\n        var _a;\n        (_a = this.voiceChat) === null || _a === void 0 ? void 0 : _a.unmute();\n    };\n    StreamingAvatar.prototype.createStartAvatar = function (requestData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var sessionInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.newSession(requestData)];\n                    case 1:\n                        sessionInfo = _a.sent();\n                        return [2 /*return*/, this.startAvatar(requestData, sessionInfo)];\n                }\n            });\n        });\n    };\n    StreamingAvatar.prototype.startAvatar = function (requestData, sessionInfo) {\n        return __awaiter(this, void 0, void 0, function () {\n            var room, mediaStream;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.sessionId = sessionInfo.session_id;\n                        this.isLiveKitTransport =\n                            requestData.voiceChatTransport === VoiceChatTransport.LIVEKIT;\n                        room = new livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room({\n                            adaptiveStream: true,\n                            dynacast: true,\n                            videoCaptureDefaults: {\n                                resolution: livekit_client__WEBPACK_IMPORTED_MODULE_0__.VideoPresets.h720.resolution,\n                            },\n                        });\n                        this.room = room;\n                        this.mediaStream = null;\n                        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived, function (roomMessage) {\n                            var eventMsg = null;\n                            try {\n                                var messageString = new TextDecoder().decode(roomMessage);\n                                eventMsg = JSON.parse(messageString);\n                            }\n                            catch (e) {\n                                console.error(e);\n                            }\n                            if (!eventMsg) {\n                                return;\n                            }\n                            _this.emit(eventMsg.type, eventMsg);\n                        });\n                        mediaStream = new MediaStream();\n                        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed, function (track) {\n                            if (track.kind === 'video' || track.kind === 'audio') {\n                                mediaStream.addTrack(track.mediaStreamTrack);\n                                var hasVideoTrack = mediaStream.getVideoTracks().length > 0;\n                                var hasAudioTrack = mediaStream.getAudioTracks().length > 0;\n                                if (hasVideoTrack && hasAudioTrack && !_this.mediaStream) {\n                                    _this.mediaStream = mediaStream;\n                                    _this.emit(StreamingEvents.STREAM_READY, _this.mediaStream);\n                                }\n                            }\n                        });\n                        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed, function (track) {\n                            var mediaTrack = track.mediaStreamTrack;\n                            if (mediaTrack) {\n                                mediaStream.removeTrack(mediaTrack);\n                            }\n                        });\n                        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, function (reason) {\n                            _this.emit(StreamingEvents.STREAM_DISCONNECTED, reason);\n                        });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, room.prepareConnection(sessionInfo.url, sessionInfo.access_token)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [4 /*yield*/, this.startSession()];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, room.connect(sessionInfo.url, sessionInfo.access_token)];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.connectWebSocket({ useSilencePrompt: !!requestData.useSilencePrompt })];\n                    case 7:\n                        _a.sent();\n                        this.initVoiceChat(requestData.voiceChatTransport || VoiceChatTransport.WEBSOCKET);\n                        this.connectionQualityIndicator.start(room);\n                        return [2 /*return*/, sessionInfo];\n                }\n            });\n        });\n    };\n    StreamingAvatar.prototype.startVoiceChat = function () {\n        return __awaiter(this, arguments, void 0, function (_a) {\n            var _b;\n            var _c = _a === void 0 ? {} : _a, isInputAudioMuted = _c.isInputAudioMuted;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, ((_b = this.voiceChat) === null || _b === void 0 ? void 0 : _b.startVoiceChat({ config: { defaultMuted: isInputAudioMuted } }))];\n                    case 1:\n                        _d.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StreamingAvatar.prototype.closeVoiceChat = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, ((_a = this.voiceChat) === null || _a === void 0 ? void 0 : _a.stopVoiceChat())];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StreamingAvatar.prototype.newSession = function (requestData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, _d, _e;\n            return __generator(this, function (_f) {\n                return [2 /*return*/, this.request('/v1/streaming.new', {\n                        avatar_name: requestData.avatarName,\n                        quality: requestData.quality,\n                        knowledge_base_id: requestData.knowledgeId,\n                        knowledge_base: requestData.knowledgeBase,\n                        voice: {\n                            voice_id: (_a = requestData.voice) === null || _a === void 0 ? void 0 : _a.voiceId,\n                            rate: (_b = requestData.voice) === null || _b === void 0 ? void 0 : _b.rate,\n                            emotion: (_c = requestData.voice) === null || _c === void 0 ? void 0 : _c.emotion,\n                            elevenlabs_settings: __assign(__assign({}, (_d = requestData === null || requestData === void 0 ? void 0 : requestData.voice) === null || _d === void 0 ? void 0 : _d.elevenlabsSettings), { model_id: (_e = requestData.voice) === null || _e === void 0 ? void 0 : _e.model }),\n                        },\n                        language: requestData.language,\n                        version: 'v2',\n                        video_encoding: 'H264',\n                        source: 'sdk',\n                        disable_idle_timeout: requestData.disableIdleTimeout,\n                        stt_settings: requestData.sttSettings,\n                        ia_is_livekit_transport: requestData.voiceChatTransport === VoiceChatTransport.LIVEKIT,\n                        silence_response: requestData.useSilencePrompt,\n                        activity_idle_timeout: requestData.activityIdleTimeout,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.startSession = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.request('/v1/streaming.start', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.speak = function (requestData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var taskType, taskMode;\n            return __generator(this, function (_a) {\n                taskType = requestData.taskType || requestData.task_type || TaskType.TALK;\n                taskMode = requestData.taskMode || TaskMode.ASYNC;\n                // livekit/websocket text transport supports only async talk task\n                if (taskType === TaskType.TALK && taskMode === TaskMode.ASYNC) {\n                    if (this.isLiveKitTransport && this.room) {\n                        this.sendLivekitMessage(requestData.text);\n                        return [2 /*return*/];\n                    }\n                    if (!this.isLiveKitTransport && this.webSocket && this.audioRawFrame) {\n                        this.sendWebsocketMessage(requestData.text);\n                        return [2 /*return*/];\n                    }\n                }\n                return [2 /*return*/, this.request('/v1/streaming.task', {\n                        text: requestData.text,\n                        session_id: this.sessionId,\n                        task_mode: requestData.taskMode,\n                        task_type: requestData.taskType,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.startListening = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.request('/v1/streaming.start_listening', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.stopListening = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.request('/v1/streaming.stop_listening', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.interrupt = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.request('/v1/streaming.interrupt', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.stopAvatar = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // clear some resources\n                this.closeVoiceChat();\n                this.connectionQualityIndicator.stop();\n                this.voiceChat = null;\n                if (this.webSocket) {\n                    this.webSocket.close();\n                    this.webSocket = null;\n                }\n                return [2 /*return*/, this.request('/v1/streaming.stop', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.keepAlive = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.request('/v1/streaming.keep_alive', {\n                        session_id: this.sessionId,\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.on = function (eventType, listener) {\n        this.eventTarget.addEventListener(eventType, listener);\n        return this;\n    };\n    StreamingAvatar.prototype.off = function (eventType, listener) {\n        this.eventTarget.removeEventListener(eventType, listener);\n        return this;\n    };\n    StreamingAvatar.prototype.sendLivekitMessage = function (message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                if (!this.room) {\n                    return [2 /*return*/];\n                }\n                data = new TextEncoder().encode(JSON.stringify(message));\n                this.room.localParticipant.publishData(data, { reliable: true });\n                return [2 /*return*/];\n            });\n        });\n    };\n    StreamingAvatar.prototype.sendWebsocketMessage = function (message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var frame, encodedFrame;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                if (!this.webSocket || !this.audioRawFrame) {\n                    return [2 /*return*/];\n                }\n                frame = (_a = this.audioRawFrame) === null || _a === void 0 ? void 0 : _a.create({\n                    text: {\n                        text: message,\n                    },\n                });\n                encodedFrame = new Uint8Array((_b = this.audioRawFrame) === null || _b === void 0 ? void 0 : _b.encode(frame).finish());\n                this.webSocket.send(encodedFrame);\n                return [2 /*return*/];\n            });\n        });\n    };\n    StreamingAvatar.prototype.initVoiceChat = function (transport) {\n        if (transport === VoiceChatTransport.WEBSOCKET) {\n            this.loadAudioRawFrame();\n            if (!this.audioRawFrame || !this.webSocket) {\n                return;\n            }\n            this.voiceChat = VoiceChatFactory.createWebSocketVoiceChat({\n                webSocket: this.webSocket,\n                audioRawFrame: this.audioRawFrame,\n            });\n        }\n        else {\n            if (!this.room) {\n                return;\n            }\n            this.voiceChat = VoiceChatFactory.createLiveKitVoiceChat({\n                room: this.room,\n            });\n        }\n    };\n    StreamingAvatar.prototype.request = function (path, params, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, errorText, jsonData, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 5, , 6]);\n                        return [4 /*yield*/, fetch(this.getRequestUrl(path), {\n                                method: 'POST',\n                                headers: {\n                                    Authorization: \"Bearer \".concat(this.token),\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify(params),\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        if (!!response.ok) return [3 /*break*/, 3];\n                        return [4 /*yield*/, response.text()];\n                    case 2:\n                        errorText = _a.sent();\n                        throw new APIError(\"API request failed with status \".concat(response.status), response.status, errorText);\n                    case 3: return [4 /*yield*/, response.json()];\n                    case 4:\n                        jsonData = _a.sent();\n                        return [2 /*return*/, jsonData.data];\n                    case 5:\n                        error_2 = _a.sent();\n                        throw error_2;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StreamingAvatar.prototype.emit = function (eventType, detail) {\n        var event = new CustomEvent(eventType, { detail: detail });\n        this.eventTarget.dispatchEvent(event);\n    };\n    StreamingAvatar.prototype.getRequestUrl = function (endpoint) {\n        return \"\".concat(this.basePath).concat(endpoint);\n    };\n    StreamingAvatar.prototype.connectWebSocket = function (requestData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var websocketUrl;\n            var _this = this;\n            return __generator(this, function (_a) {\n                websocketUrl = \"wss://\".concat(new URL(this.basePath).hostname, \"/v1/ws/streaming.chat?session_id=\").concat(this.sessionId, \"&session_token=\").concat(this.token).concat(this.isLiveKitTransport ? '&arch_version=v2' : '', \"&silence_response=\").concat(requestData.useSilencePrompt);\n                this.webSocket = new WebSocket(websocketUrl);\n                this.webSocket.addEventListener('message', function (event) {\n                    var eventData = null;\n                    try {\n                        eventData = JSON.parse(event.data);\n                    }\n                    catch (e) {\n                        console.error(e);\n                        return;\n                    }\n                    if (eventData) {\n                        _this.emit(eventData.event_type, eventData);\n                    }\n                });\n                this.webSocket.addEventListener('close', function (event) {\n                    _this.webSocket = null;\n                });\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var _a, _b;\n                        (_a = _this.webSocket) === null || _a === void 0 ? void 0 : _a.addEventListener('error', function (event) {\n                            _this.webSocket = null;\n                            reject(event);\n                        });\n                        (_b = _this.webSocket) === null || _b === void 0 ? void 0 : _b.addEventListener('open', function () {\n                            resolve(true);\n                        });\n                    })];\n            });\n        });\n    };\n    StreamingAvatar.prototype.loadAudioRawFrame = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var root;\n            return __generator(this, function (_a) {\n                if (!this.audioRawFrame) {\n                    root = protobufjs__WEBPACK_IMPORTED_MODULE_1__.Root.fromJSON(jsonDescriptor);\n                    this.audioRawFrame = root === null || root === void 0 ? void 0 : root.lookupType('pipecat.Frame');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return StreamingAvatar;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@heygen/streaming-avatar/lib/index.esm.js\n");

/***/ })

};
;